
		<p>Today, we are looking precisely at the <tt>proto</tt> keyword. It gives a hint for the compiler about your intention to create multi-subs.</p>
<h2>Example 1</h2>
<p>Consider an example of the function that either flips a string or negates an integer.</p>
<pre>multi sub f(Int $x) {
    return -$x;
}

multi sub f(Str $x) {
    return $x.flip;
}

say f(42);      <em># -42</em>
say f(&#39;Hello&#39;); <em># olleH</em></pre>
<p>What if we create another variant of the function that takes two arguments.</p>
<pre>multi sub f($a, $b) {
    return $a + $b;
}

say f(1, 2); <em># 3
</em></pre>
<p>This code perfectly works, but it looks like its harmony is broken. Even if the name of the function says nothing about what it does, we intended to have a function that somehow returns a ‘reflected’ version of its argument. The function that adds up two numbers does not fit this idea.</p>
<p>So, it is time to clearly announce the intention with the help of the <tt>proto</tt> keyword.</p>
<pre>proto sub f($x) {*}</pre>
<p>Now, an attempt of calling the two-argument function won’t compile:</p>
<pre class="p1"><span class="s1">===</span><span class="s2">SORRY!</span><span class="s1">===</span><span class="s2"> Error while compiling proto.pl</span>
<span class="s2">Calling f(Int, Int) will never work with proto signature ($x)</span>
<span class="s2">at proto.pl:15</span>
<span class="s2">------&gt; </span><span class="s3">say </span><span class="s4">⏏</span><span class="s1">f(1,2)</span></pre>
<p>The calls of the one-argument variants work perfectly. The proto-definition creates a pattern for the function <tt>f</tt>: its name is <em>f</em>, and it takes one scalar argument. Multi-functions specify the behaviour and narrow their expertise to either integers or strings.</p>
<h2>Example 2</h2>
<p>Another example involves a proto-definition with two typed arguments in the function signature.</p>
<pre>proto sub g(Int $x, Int $y) {*}</pre>
<p>In this example, the function returns a sum of the two integers. When one of the numbers is much bigger than the other, the smaller number is just ignored as being not significant enough:</p>
<pre>multi sub g(Int $x, Int $y) {
   return $x + $y;
}

multi sub g(Int $x, Int $y where {$y &gt; 1_000_000 * $x}) {
   return $y;
}</pre>
<p>Call the function with integer arguments and see how Perl 6 picks the correct variant:</p>
<pre>say g(1, 2);          <em># 3</em>
say g(3, 10_000_000); <em># 10000000</em></pre>
<p>Didn’t you forget that the prototype insists on two integers? Try it out passing floating-point numbers:</p>
<pre>say g(pi, e);</pre>
<p>We got a compile-time error:</p>
<pre>===SORRY!=== Error while compiling proto-int.pl
Calling g(Num, Num) will never work with proto signature (Int $x, Int $y)
at proto-int.pl:13
------&gt; say ⏏g(pi, e);</pre>
<p>The prototype has caught the error in the function usage. What happens if there is no <tt>proto</tt> for the <tt>g</tt> sub? The function is still not called, but the error message is different. It happens at run-time this time:</p>
<pre>Cannot resolve caller g(3.14159265358979e0, 2.71828182845905e0); none of these signatures match:
 (Int $x, Int $y)
 (Int $x, Int $y where { ... })
 in block &lt;unit&gt; at proto-int.pl line 13</pre>
<p>We still have no acceptable signature for the floating-point numbers, but the compiler cannot see that until the program flow reaches the code.</p>
<div class="sharedaddy sd-like-enabled sd-sharing-enabled" id="jp-post-flair"><div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a class="share-twitter sd-button share-icon" data-shared="sharing-twitter-21" href="https://perl6.online/2017/12/21/the-proto-keyword/?share=twitter" rel="nofollow" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-facebook"><a class="share-facebook sd-button share-icon" data-shared="sharing-facebook-21" href="https://perl6.online/2017/12/21/the-proto-keyword/?share=facebook" rel="nofollow" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-google-plus-1"><a class="share-google-plus-1 sd-button share-icon" data-shared="sharing-google-21" href="https://perl6.online/2017/12/21/the-proto-keyword/?share=google-plus-1" rel="nofollow" target="_blank" title="Click to share on Google+"><span>Google</span></a></li><li class="share-end"></li></ul></div></div></div><div class="sharedaddy sd-block sd-like jetpack-likes-widget-wrapper jetpack-likes-widget-unloaded" data-name="like-post-frame-139853928-21-5afe9dc5cf067" data-src="//widgets.wp.com/likes/index.html?ver=20180319#blog_id=139853928&amp;post_id=21&amp;origin=inperl6.wordpress.com&amp;obj_id=139853928-21-5afe9dc5cf067" id="like-post-wrapper-139853928-21-5afe9dc5cf067"><h3 class="sd-title">Like this:</h3><div class="likes-widget-placeholder post-likes-widget-placeholder" style="height: 55px;"><span class="button"><span>Like</span></span> <span class="loading">Loading...</span></div><span class="sd-text-color"></span><a class="sd-link-color"></a></div>
<div class="jp-relatedposts" id="jp-relatedposts">
	<h3 class="jp-relatedposts-headline"><em>Related</em></h3>
</div></div>	
