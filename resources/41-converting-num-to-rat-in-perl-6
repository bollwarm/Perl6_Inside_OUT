
		<p>In Perl 6, you can easily coerce numerical values from one type to another. One of the interesting conversions is Num to Rat.</p>
<p>For example, take the value of π and convert it to a fraction:</p>
<pre>$ perl6 -e&#39;say pi.Rat.perl&#39;
&lt;355/113&gt;</pre>
<p>Indeed, 355/113 is <span class="s1">3.14159292035398, which is close to π. The default maximum error is built-in in Rakudo and is set to 10<sup>–6</sup>.</span></p>
<h2>Algorithm</h2>
<p>The implementation of the method is located in the src/core/Num.pm file. Let us read it line by line. First, the signature:</p>
<pre>method Rat(Num:D: Real $epsilon = 1.0e-6, :$fat)</pre>
<p>Here, you see <tt>$epsilon</tt>, a positional parameter with the default value, and a flag, <tt>:$fat</tt>, which you should set if you want to have a FatRat value. The first action is creating a variable that is either a Rat or a FatRat:</p>
<pre> my \RAT = $fat ?? FatRat !! Rat;</pre>
<p>The next step is a test whether the number is a number and is not infinite:</p>
<pre> return RAT.new: (
     nqp::iseq_n(self, self) ?? nqp::iseq_n(self, Inf) ?? 1 !! -1 !! 0
   ), 0
 if <strong>nqp::isnanorinf</strong>(nqp::unbox_n(self));</pre>
<p>Another quick check — return immediately if the value is already an integer:</p>
<pre>my Num $num = self;
$num = -$num if (my int $signum = $num &lt; 0);
my num $r = $num - floor($num);

if <strong>nqp::iseq_n</strong>($r,0e0) {
    RAT.new(nqp::fromnum_I(self,Int),1)
}</pre>
<p>At this point, we have a first approximation: the <tt>$num</tt> variable contains an integer part. The rest is shown in the picture:</p>
<p><img alt="IMG_1969" class="alignnone size-full wp-image-445" data-attachment-id="445" data-comments-opened="1" data-image-description="" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="IMG_1969" data-large-file="https://inperl6.files.wordpress.com/2018/01/img_1969.jpg?w=1100?w=1000" data-medium-file="https://inperl6.files.wordpress.com/2018/01/img_1969.jpg?w=1100?w=300" data-orig-file="https://inperl6.files.wordpress.com/2018/01/img_1969.jpg?w=1100" data-orig-size="1000,712" data-permalink="https://perl6.online/2018/01/30/41-converting-num-to-rat-in-perl-6/img_1969/" sizes="(max-width: 1000px) 100vw, 1000px" src="https://inperl6.files.wordpress.com/2018/01/img_1969.jpg?w=1100" srcset="https://inperl6.files.wordpress.com/2018/01/img_1969.jpg 1000w, https://inperl6.files.wordpress.com/2018/01/img_1969.jpg?w=150 150w, https://inperl6.files.wordpress.com/2018/01/img_1969.jpg?w=300 300w, https://inperl6.files.wordpress.com/2018/01/img_1969.jpg?w=768 768w"></p>
<p>Seriously speaking, the rest of the method is an implementation of the <a href="https://rosettacode.org/wiki/Convert_decimal_number_to_rational">numerical approximation</a>, which tries to find such numerator and denominator so that the fraction is close enough to the value in question.</p>
<p>First, some values are initialised and prepared:</p>
<pre> my Int $q = nqp::fromnum_I($num, Int);
 my Int $a = 1;
 my Int $b = $q;
 my Int $c = 0;
 my Int $d = 1;</pre>
<p>Now, <tt>$q</tt> and <tt>$b</tt> (which is the numerator) are the most rough integer approximation, and <tt>$d</tt> (denominator) is set to 1.</p>
<p>The rest is a loop, which stops when an accurate enough fraction is found:</p>
<pre>while nqp::isne_n($r,0e0) &amp;&amp; <strong>abs($num - ($b / $d)) &gt; $epsilon</strong> {
    my num $modf_arg = 1e0 / $r;
    $q = nqp::fromnum_I($modf_arg, Int);
    $r = $modf_arg - floor($modf_arg);

    my $orig_b = $b;
    $b = $q * $b + $a;
    $a = $orig_b;

    my $orig_d = $d;
    $d = $q * $d + $c;
    $c = $orig_d;
}</pre>
<p>And finally, a Rat value is built:</p>
<pre>RAT.new($signum ?? -$b !! $b, $d)</pre>
<h2>Approximation</h2>
<p>When using the <tt>Num::Rat</tt> method, as we saw, you can set the precision you need. For example:</p>
<pre>$ ./perl6 -e&#39;say pi.Rat(<strong>1</strong>)&#39;
3

$ ./perl6 -e&#39;say pi.Rat(<strong>0.1</strong>)&#39;
3.142857</pre>
<p>I also added some debug output to see the steps that the algorithm comes through. Surprisingly, it converges very quickly.</p>
<pre>$ ./perl6 -e&#39;say <strong>pi.Rat</strong>.nude&#39;
3/1 = 3
22/7 = 3.142857
333/106 = 3.141509
(355 113)</pre>
<pre>$ ./perl6 -e&#39;say <strong>pi.Rat(1e-10)</strong>.nude&#39;
3/1 = 3
22/7 = 3.142857
333/106 = 3.141509
355/113 = 3.141593
103993/33102 = 3.141593
104348/33215 = 3.141593
208341/66317 = 3.141593
(312689 99532)</pre>
<pre>$ ./perl6 -e&#39;say <strong>e.Ra</strong>t.nude&#39;
2/1 = 2
3/1 = 3
8/3 = 2.666667
11/4 = 2.75
19/7 = 2.714286
87/32 = 2.71875
106/39 = 2.717949
193/71 = 2.718310
1264/465 = 2.718280
1457/536 = 2.718284
(2721 1001)</pre>
<p> </p>
<div class="sharedaddy sd-like-enabled sd-sharing-enabled" id="jp-post-flair"><div class="sharedaddy sd-sharing-enabled"><div class="robots-nocontent sd-block sd-social sd-social-icon-text sd-sharing"><h3 class="sd-title">Share this:</h3><div class="sd-content"><ul><li class="share-twitter"><a class="share-twitter sd-button share-icon" data-shared="sharing-twitter-444" href="https://perl6.online/2018/01/30/41-converting-num-to-rat-in-perl-6/?share=twitter" rel="nofollow" target="_blank" title="Click to share on Twitter"><span>Twitter</span></a></li><li class="share-facebook"><a class="share-facebook sd-button share-icon" data-shared="sharing-facebook-444" href="https://perl6.online/2018/01/30/41-converting-num-to-rat-in-perl-6/?share=facebook" rel="nofollow" target="_blank" title="Click to share on Facebook"><span>Facebook</span></a></li><li class="share-google-plus-1"><a class="share-google-plus-1 sd-button share-icon" data-shared="sharing-google-444" href="https://perl6.online/2018/01/30/41-converting-num-to-rat-in-perl-6/?share=google-plus-1" rel="nofollow" target="_blank" title="Click to share on Google+"><span>Google</span></a></li><li class="share-end"></li></ul></div></div></div><div class="sharedaddy sd-block sd-like jetpack-likes-widget-wrapper jetpack-likes-widget-unloaded" data-name="like-post-frame-139853928-444-5afe9d7704bec" data-src="//widgets.wp.com/likes/index.html?ver=20180319#blog_id=139853928&amp;post_id=444&amp;origin=inperl6.wordpress.com&amp;obj_id=139853928-444-5afe9d7704bec" id="like-post-wrapper-139853928-444-5afe9d7704bec"><h3 class="sd-title">Like this:</h3><div class="likes-widget-placeholder post-likes-widget-placeholder" style="height: 55px;"><span class="button"><span>Like</span></span> <span class="loading">Loading...</span></div><span class="sd-text-color"></span><a class="sd-link-color"></a></div>
<div class="jp-relatedposts" id="jp-relatedposts">
	<h3 class="jp-relatedposts-headline"><em>Related</em></h3>
</div></div>	
